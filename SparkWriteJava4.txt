function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

const msg1 = new Uint8Array(   [0x01,0xfe,0x00,0x00,0x53,0xfe,0x1a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0xf0,0x01,0x24,0x00,0x01,0x38,0x00,0x00,0x00,0xf7]);
const msg2 = new Uint8Array(   [0x01,0xfe,0x00,0x00,0x53,0xfe,0x1a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0xf0,0x01,0x24,0x00,0x01,0x38,0x00,0x00,0x7f,0xf7]);
const pre1 = new Uint8Array(   [0x01,0xfe,0x00,0x00,0x53,0xfe,0xad,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			        0xf0,0x01,0x3a,0x15,0x01,0x01,0x24,0x04,0x00,0x00,0x00,0x7f,0x59,0x24,0x00,0x43,
			        0x44,0x45,0x39,0x39,0x35,0x39,0x00,0x31,0x2d,0x43,0x30,0x35,0x44,0x2d,0x00,0x34,
			        0x41,0x45,0x30,0x2d,0x39,0x45,0x00,0x33,0x34,0x2d,0x45,0x43,0x34,0x41,0x00,0x38,
 			        0x31,0x46,0x33,0x46,0x38,0x34,0x02,0x46,0x2c,0x53,0x77,0x65,0x65,0x74,0x00,0x20,
			        0x4d,0x65,0x6d,0x6f,0x72,0x79,0x11,0x23,0x30,0x2e,0x37,0x27,0x31,0x2d,0x20,0x43,
			        0x6c,0x65,0x61,0x6e,0x28,0x69,0x00,0x63,0x6f,0x6e,0x2e,0x70,0x6e,0x67,0x65,0x4a,
			        0x42,0x70,0x00,0x00,0x17,0x2e,0x00,0x62,0x69,0x61,0x73,0x2e,0x6e,0x6f,0x00,0x69,
			        0x73,0x65,0x67,0x61,0x74,0x65,0x5b,0x42,0x13,0x00,0x11,0x4a,0x3d,0x4b,0x18,0x44,
			        0x1c,0x01,0x11,0x4a,0x3f,0x12,0x1a,0x2c,0x5c,0x02,0x11,0x4a,0x00,0x00,0x04,0x00,
			        0x00,0x28,0x42,0x6c,0x75,0x65,0x10,0x43,0x6f,0x6d,0x70,0x42,0xf7]);
const pre2 = new Uint8Array(   [0x01,0xfe,0x00,0x00,0x53,0xfe,0xad,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0xf0,0x01,0x3a,0x15,0x01,0x01,0x6c,0x04,0x01,0x00,0x14,0x00,0x11,0x4a,0x6a,0x3e,
				0x5c,0x6c,0x5b,0x01,0x11,0x4a,0x64,0x3f,0x29,0x4d,0x70,0x02,0x11,0x4a,0x6e,0x3e,
				0x35,0x48,0x5a,0x03,0x11,0x4a,0x14,0x3f,0x0e,0x18,0x78,0x2d,0x44,0x69,0x00,0x73,
				0x74,0x6f,0x72,0x74,0x69,0x6f,0x30,0x6e,0x54,0x53,0x39,0x42,0x13,0x00,0x33,0x11,
				0x4a,0x3d,0x6d,0x1c,0x71,0x01,0x13,0x11,0x4a,0x3f,0x3d,0x61,0x7e,0x02,0x53,0x11,
				0x4a,0x3f,0x18,0x0e,0x7a,0x2b,0x00,0x39,0x34,0x4d,0x61,0x74,0x63,0x68,0x30,0x44,
				0x43,0x56,0x32,0x43,0x15,0x00,0x23,0x11,0x4a,0x3f,0x07,0x67,0x32,0x01,0x03,0x11,
				0x4a,0x3f,0x00,0x3b,0x4f,0x02,0x03,0x11,0x4a,0x3e,0x7c,0x12,0x27,0x03,0x3b,0x11,
				0x4a,0x3e,0x55,0x10,0x1f,0x04,0x43,0x11,0x4a,0x3f,0x48,0x44,0x5b,0x27,0x00,0x46,
				0x6c,0x61,0x6e,0x67,0x65,0x72,0x1b,0x42,0x13,0x00,0x11,0x4a,0xf7]);
const pre3 = new Uint8Array(   [0x01,0xfe,0x00,0x00,0x53,0xfe,0xad,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0xf0,0x01,0x3a,0x15,0x01,0x01,0x74,0x04,0x02,0x00,0x3e,0x53,0x5c,0x2d,0x26,0x01,
				0x11,0x4a,0x3f,0x29,0x3d,0x30,0x26,0x02,0x11,0x4a,0x3f,0x27,0x39,0x5a,0x01,0x2a,
				0x44,0x65,0x6c,0x61,0x79,0x52,0x30,0x65,0x32,0x30,0x31,0x43,0x15,0x00,0x2b,0x11,
				0x4a,0x3d,0x48,0x3f,0x55,0x01,0x1b,0x11,0x4a,0x3e,0x1f,0x56,0x52,0x02,0x2b,0x11,
				0x4a,0x3e,0x78,0x69,0x46,0x03,0x0b,0x11,0x4a,0x3e,0x3d,0x41,0x74,0x04,0x4b,0x11,
				0x4a,0x3f,0x00,0x00,0x00,0x2b,0x00,0x62,0x69,0x61,0x73,0x2e,0x72,0x65,0x30,0x76,
				0x65,0x72,0x62,0x43,0x17,0x00,0x33,0x11,0x4a,0x3f,0x0f,0x29,0x52,0x01,0x13,0x11,
				0x4a,0x3f,0x01,0x34,0x67,0x02,0x1b,0x11,0x4a,0x3e,0x55,0x71,0x5a,0x03,0x2b,0x11,
				0x4a,0x3e,0x1a,0x08,0x1e,0x04,0x03,0x11,0x4a,0x3f,0x1a,0x2f,0x7b,0x05,0x03,0x11,
				0x4a,0x3f,0x18,0x18,0x1e,0x06,0x03,0x11,0x4a,0x00,0x00,0x00,0xf7]);
const pre4 = new Uint8Array(   [0x01,0xfe,0x00,0x00,0x53,0xfe,0x1d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0xf0,0x01,0x3a,0x15,0x01,0x01,0x10,0x04,0x03,0x02,0x00,0x6b,0xf7]);

class SparkBLE {

  constructor() {
    this.device = null;
    this.onDisconnected = this.onDisconnected.bind(this);
  }
  
  async request() {
    let options = {
      "filters": [{
        services: ['0000ffc0-0000-1000-8000-00805f9b34fb']
      }]
    };
    this.device = await navigator.bluetooth.requestDevice(options);
    if (!this.device) {
      throw "No device selected";
    }
    this.device.addEventListener('gattserverdisconnected', this.onDisconnected);
  }
  
  async connect() {
    if (!this.device) {
      return Promise.reject('Device is not connected.');
    }
    await this.device.gatt.connect();
  }
  
  async writeData(data) {
    const service = await this.device.gatt.getPrimaryService('0000ffc0-0000-1000-8000-00805f9b34fb');
    const characteristic = await service.getCharacteristic('0000ffc1-0000-1000-8000-00805f9b34fb');
    await characteristic.writeValueWithoutResponse(data);
  }

  disconnect() {
    if (!this.device) {
      return Promise.reject('Device is not connected.');
    }
    return this.device.gatt.disconnect();
  }

  onDisconnected() {
    console.log('Device is disconnected.');
  }
}

var mySpark = new SparkBLE();

try {
    await mySpark.request();
    await mySpark.connect();
    await mySpark.writeData(msg1);
    await delay(2000);
    await mySpark.writeData(pre1);
    await delay(500);
    await mySpark.writeData(pre2);
    await delay(500);
    await mySpark.writeData(pre3);
    await delay(500);
    await mySpark.writeData(pre4);
    await delay(500);
    await mySpark.writeData(msg2);
} catch(error) {
    console.log(error);
}
